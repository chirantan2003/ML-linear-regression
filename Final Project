{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "ex1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPUFKRLwvbVjQGZs3/jSi6V",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/chirantan2003/first-ml-project/blob/main/Final%20Project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "6xKazcky27hp"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from matplotlib import pyplot as plt\n",
        "import numpy.matlib\n",
        "from sklearn import linear_model\n",
        "import seaborn as sb"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def warmUpExercise():\n",
        "  a=np.identity(5)\n",
        "  print(a)"
      ],
      "metadata": {
        "id": "2ejxduAH3ODt"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"THIS IS WARMUP EXERCISE\")\n",
        "warmUpExercise()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pb9vkq-j3jdz",
        "outputId": "36effc61-9141-41b9-e91a-c74630712356"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "THIS IS WARMUP EXERCISE\n",
            "[[1. 0. 0. 0. 0.]\n",
            " [0. 1. 0. 0. 0.]\n",
            " [0. 0. 1. 0. 0.]\n",
            " [0. 0. 0. 1. 0.]\n",
            " [0. 0. 0. 0. 1.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Part 2 Begins:"
      ],
      "metadata": {
        "id": "0UTKigN_7Brv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Plotting Data\")\n",
        "df = pd.read_table(\"/content/ex1data1.txt\", header = None ,delimiter=\",\", names=[\"X\", \"y\"])\n",
        "print(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NJcrSmwK4l1f",
        "outputId": "c90add74-50d1-4325-ecb4-7a3e3f6320d5"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Plotting Data\n",
            "          X         y\n",
            "0    6.1101  17.59200\n",
            "1    5.5277   9.13020\n",
            "2    8.5186  13.66200\n",
            "3    7.0032  11.85400\n",
            "4    5.8598   6.82330\n",
            "..      ...       ...\n",
            "92   5.8707   7.20290\n",
            "93   5.3054   1.98690\n",
            "94   8.2934   0.14454\n",
            "95  13.3940   9.05510\n",
            "96   5.4369   0.61705\n",
            "\n",
            "[97 rows x 2 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plotting data:\n"
      ],
      "metadata": {
        "id": "65osAyFMOzb4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def plotData(x,y):\n",
        "  df.plot.scatter(x=\"X\" , y=\"y\", s = 50, marker=\"x\", color=\"red\")\n",
        "  plt.xlabel(\"population\")\n",
        "  plt.ylabel(\"profit\")\n",
        "\n",
        "plotData(\"X\",\"y\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        },
        "id": "Vn6VFAtwCH9e",
        "outputId": "1243846c-0cbd-43de-abeb-68d13f207064"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Part 3 Begins"
      ],
      "metadata": {
        "id": "tmA-tODsSvjI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "A = np.matrix(df)\n",
        "X = np.r_[ [np.zeros(2)],A ]\n",
        "X = np.c_[ np.ones(len(X)), X ]\n",
        "print(X)\n",
        "y = X[:,2]\n",
        "theta = np.matlib.zeros((2,1))\n",
        "\n",
        "iterations = 1500\n",
        "alpha = 0.01"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zs0LjobKPSYR",
        "outputId": "611ac7b3-c868-494a-ef18-365b7cff6da9"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 1.       0.       0.     ]\n",
            " [ 1.       6.1101  17.592  ]\n",
            " [ 1.       5.5277   9.1302 ]\n",
            " [ 1.       8.5186  13.662  ]\n",
            " [ 1.       7.0032  11.854  ]\n",
            " [ 1.       5.8598   6.8233 ]\n",
            " [ 1.       8.3829  11.886  ]\n",
            " [ 1.       7.4764   4.3483 ]\n",
            " [ 1.       8.5781  12.     ]\n",
            " [ 1.       6.4862   6.5987 ]\n",
            " [ 1.       5.0546   3.8166 ]\n",
            " [ 1.       5.7107   3.2522 ]\n",
            " [ 1.      14.164   15.505  ]\n",
            " [ 1.       5.734    3.1551 ]\n",
            " [ 1.       8.4084   7.2258 ]\n",
            " [ 1.       5.6407   0.71618]\n",
            " [ 1.       5.3794   3.5129 ]\n",
            " [ 1.       6.3654   5.3048 ]\n",
            " [ 1.       5.1301   0.56077]\n",
            " [ 1.       6.4296   3.6518 ]\n",
            " [ 1.       7.0708   5.3893 ]\n",
            " [ 1.       6.1891   3.1386 ]\n",
            " [ 1.      20.27    21.767  ]\n",
            " [ 1.       5.4901   4.263  ]\n",
            " [ 1.       6.3261   5.1875 ]\n",
            " [ 1.       5.5649   3.0825 ]\n",
            " [ 1.      18.945   22.638  ]\n",
            " [ 1.      12.828   13.501  ]\n",
            " [ 1.      10.957    7.0467 ]\n",
            " [ 1.      13.176   14.692  ]\n",
            " [ 1.      22.203   24.147  ]\n",
            " [ 1.       5.2524  -1.22   ]\n",
            " [ 1.       6.5894   5.9966 ]\n",
            " [ 1.       9.2482  12.134  ]\n",
            " [ 1.       5.8918   1.8495 ]\n",
            " [ 1.       8.2111   6.5426 ]\n",
            " [ 1.       7.9334   4.5623 ]\n",
            " [ 1.       8.0959   4.1164 ]\n",
            " [ 1.       5.6063   3.3928 ]\n",
            " [ 1.      12.836   10.117  ]\n",
            " [ 1.       6.3534   5.4974 ]\n",
            " [ 1.       5.4069   0.55657]\n",
            " [ 1.       6.8825   3.9115 ]\n",
            " [ 1.      11.708    5.3854 ]\n",
            " [ 1.       5.7737   2.4406 ]\n",
            " [ 1.       7.8247   6.7318 ]\n",
            " [ 1.       7.0931   1.0463 ]\n",
            " [ 1.       5.0702   5.1337 ]\n",
            " [ 1.       5.8014   1.844  ]\n",
            " [ 1.      11.7      8.0043 ]\n",
            " [ 1.       5.5416   1.0179 ]\n",
            " [ 1.       7.5402   6.7504 ]\n",
            " [ 1.       5.3077   1.8396 ]\n",
            " [ 1.       7.4239   4.2885 ]\n",
            " [ 1.       7.6031   4.9981 ]\n",
            " [ 1.       6.3328   1.4233 ]\n",
            " [ 1.       6.3589  -1.4211 ]\n",
            " [ 1.       6.2742   2.4756 ]\n",
            " [ 1.       5.6397   4.6042 ]\n",
            " [ 1.       9.3102   3.9624 ]\n",
            " [ 1.       9.4536   5.4141 ]\n",
            " [ 1.       8.8254   5.1694 ]\n",
            " [ 1.       5.1793  -0.74279]\n",
            " [ 1.      21.279   17.929  ]\n",
            " [ 1.      14.908   12.054  ]\n",
            " [ 1.      18.959   17.054  ]\n",
            " [ 1.       7.2182   4.8852 ]\n",
            " [ 1.       8.2951   5.7442 ]\n",
            " [ 1.      10.236    7.7754 ]\n",
            " [ 1.       5.4994   1.0173 ]\n",
            " [ 1.      20.341   20.992  ]\n",
            " [ 1.      10.136    6.6799 ]\n",
            " [ 1.       7.3345   4.0259 ]\n",
            " [ 1.       6.0062   1.2784 ]\n",
            " [ 1.       7.2259   3.3411 ]\n",
            " [ 1.       5.0269  -2.6807 ]\n",
            " [ 1.       6.5479   0.29678]\n",
            " [ 1.       7.5386   3.8845 ]\n",
            " [ 1.       5.0365   5.7014 ]\n",
            " [ 1.      10.274    6.7526 ]\n",
            " [ 1.       5.1077   2.0576 ]\n",
            " [ 1.       5.7292   0.47953]\n",
            " [ 1.       5.1884   0.20421]\n",
            " [ 1.       6.3557   0.67861]\n",
            " [ 1.       9.7687   7.5435 ]\n",
            " [ 1.       6.5159   5.3436 ]\n",
            " [ 1.       8.5172   4.2415 ]\n",
            " [ 1.       9.1802   6.7981 ]\n",
            " [ 1.       6.002    0.92695]\n",
            " [ 1.       5.5204   0.152  ]\n",
            " [ 1.       5.0594   2.8214 ]\n",
            " [ 1.       5.7077   1.8451 ]\n",
            " [ 1.       7.6366   4.2959 ]\n",
            " [ 1.       5.8707   7.2029 ]\n",
            " [ 1.       5.3054   1.9869 ]\n",
            " [ 1.       8.2934   0.14454]\n",
            " [ 1.      13.394    9.0551 ]\n",
            " [ 1.       5.4369   0.61705]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Cost Function"
      ],
      "metadata": {
        "id": "uZzAqSSQO9BD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def computeCost(X, y, theta):\n",
        "  J=0\n",
        "  p=0\n",
        "  theta0 = theta[0]\n",
        "  theta1 = theta[1]\n",
        "  for i in range (len(X)):\n",
        "    hTheta = theta0 + theta1*X[i]\n",
        "    p += sum(np.square(hTheta - y[i]))\n",
        "  J = p/(2*97)\n",
        "  J = J[:,1]\n",
        "  J = J[0,0]\n",
        "  return J"
      ],
      "metadata": {
        "id": "7wpbNnmiS7Tb"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "J = computeCost(X,y,theta)\n",
        "print(\"With theta = [0 ; 0] computed cost = \" '%.2f'%J)\n",
        "print(\"Expected cost value approx 32.07\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6r_sEpu8EmGZ",
        "outputId": "be8c67a8-6984-41e8-cb7d-38977c6db9c3"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "With theta = [0 ; 0] computed cost = 32.07\n",
            "Expected cost value approx 32.07\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "J = computeCost(X,y,np.transpose(np.matrix([-1,2])))\n",
        "print(\"With theta = [-1 ; 2] computed cost = \" '%.2f'%J)\n",
        "print('Expected cost value (approx) 54.24\\n')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1uu4aJjB57GJ",
        "outputId": "2b36efec-ea30-4231-f160-91e3e3901364"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "With theta = [-1 ; 2] computed cost = 54.25\n",
            "Expected cost value (approx) 54.24\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Gradient Descent "
      ],
      "metadata": {
        "id": "DR8IM3CzPCNw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def gradientDescent(X, y, theta, alpha, num_iters):\n",
        "  m_curr = b_curr = 0\n",
        "  x1 = np.transpose(X[:, 1])\n",
        "  y1 = np.transpose(y)\n",
        "  x1 = (np.asarray(x1)).flatten()\n",
        "  y1 = (np.asarray(y1)).flatten()\n",
        "  m=len(X)\n",
        "  \n",
        "  for i in range (num_iters):\n",
        "    y_predicted = m_curr*x1 + b_curr\n",
        "    cost = (1/m) * sum([val**2 for val in (y1-y_predicted)])\n",
        "    theta0 = -(2/m)*sum(x1*(y1-y_predicted))\n",
        "    theta1 = -(2/m)*sum(y1-y_predicted)\n",
        "    m_curr = m_curr - alpha*theta0\n",
        "    b_curr = b_curr - alpha*theta1\n",
        "    # print (\"m {}, b {}, cost {} iteration {}\".format(m_curr,b_curr,cost, i))\n",
        "  theta = [b_curr, m_curr]\n",
        "  return theta  "
      ],
      "metadata": {
        "id": "w4FYZ3eK0Mc6"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "theta = gradientDescent(X, y, np.transpose(np.matrix([0,0])), alpha, iterations) \n",
        "print('Theta found by gradient descent:\\n', '%.4f'%theta[0], \"\\n\" , '%.4f'%theta[1])\n",
        "print('Expected theta values (approx)\\n -3.6303\\n  1.1664')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FhqRm26bCaqC",
        "outputId": "47c34f2b-86ee-4068-9e1b-831bfdb8293a"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Theta found by gradient descent:\n",
            " -3.6740 \n",
            " 1.1708\n",
            "Expected theta values (approx)\n",
            " -3.6303\n",
            "  1.1664\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plotting the Linear Regression graph"
      ],
      "metadata": {
        "id": "aCvhjW8mPHwt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "reg = linear_model.LinearRegression()\n",
        "reg.fit(df[['X']], df.y)\n",
        "\n",
        "plt.xlabel('Population of City in 10,000s', fontsize=10)\n",
        "plt.ylabel('Profit in $10,000s', fontsize=10)\n",
        "plt.scatter(df.X, df.y, marker='x', color='red')\n",
        "plt.plot(df.X, reg.predict(df[['X']]), )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "id": "q3QDSukdHiCi",
        "outputId": "e4bbb293-523a-421e-b5b3-2f670288fbca"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fb964ccfd10>]"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Predictions"
      ],
      "metadata": {
        "id": "OJG0d3JiPN2Y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "thetaTranspose = np.transpose(np.matrix(theta))\n",
        "\n",
        "predict1 = np.matrix([1, 3.5])*thetaTranspose\n",
        "predict1 = predict1[0,0]\n",
        "print('For population = 35,000, we predict a profit of \\n', predict1*10000)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ce6OsB_lbWV-",
        "outputId": "e6264c72-1b12-4ff5-a0fb-2cff58898144"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "For population = 35,000, we predict a profit of \n",
            " 4238.096082821876\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predict2 = np.matrix([1, 7]) * thetaTranspose\n",
        "predict2 = predict2[0,0]\n",
        "print('For population = 70,000, we predict a profit of \\n', predict2*10000)"
      ],
      "metadata": {
        "id": "s7hRz7xlc7Yh",
        "outputId": "faa384c2-a4b2-41e8-a832-caa0de715c46",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "For population = 70,000, we predict a profit of \n",
            " 45216.023788537976\n"
          ]
        }
      ]
    }
  ]
}